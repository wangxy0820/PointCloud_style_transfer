# Pre-commit configuration for Point Cloud Style Transfer project
# Install with: pip install pre-commit && pre-commit install

repos:
  # Built-in hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        exclude: \.md$
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-added-large-files
        args: ['--maxkb=50000']  # 50MB limit
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: debug-statements
      - id: detect-private-key
      - id: fix-byte-order-marker
      - id: mixed-line-ending
        args: ['--fix=lf']

  # Python code formatting with Black
  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=100]

  # Import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ["--profile", "black", "--line-length=100"]

  # Flake8 for linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: [
          '--max-line-length=100',
          '--ignore=E203,E501,W503,F401',
          '--exclude=__pycache__,build,dist,.git,.tox,.eggs,*.egg',
        ]
        additional_dependencies: [
          flake8-docstrings,
          flake8-import-order,
          flake8-bugbear,
        ]

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.3.0
    hooks:
      - id: mypy
        args: [--ignore-missing-imports, --follow-imports=skip]
        additional_dependencies: [
          types-requests,
          types-PyYAML,
        ]
        exclude: ^(tests/|scripts/|docs/)

  # Security checks with bandit
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ['-r', '.', '-f', 'json', '-o', 'bandit-report.json']
        exclude: ^tests/

  # Documentation checks
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google]
        exclude: ^(tests/|scripts/setup\.py)

  # Jupyter notebook formatting
  - repo: https://github.com/nbQA-dev/nbQA
    rev: 1.7.0
    hooks:
      - id: nbqa-black
        additional_dependencies: [black==23.3.0]
      - id: nbqa-isort
        additional_dependencies: [isort==5.12.0]
      - id: nbqa-flake8
        additional_dependencies: [flake8==6.0.0]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.2
    hooks:
      - id: shellcheck

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.0-alpha.9-for-vscode
    hooks:
      - id: prettier
        types: [yaml]

  # Python upgrade syntax
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.7.0
    hooks:
      - id: pyupgrade
        args: [--py38-plus]

  # Remove unused imports and variables
  - repo: https://github.com/pycqa/autoflake
    rev: v2.1.1
    hooks:
      - id: autoflake
        args: [
          --in-place,
          --remove-unused-variables,
          --remove-all-unused-imports,
          --expand-star-imports,
          --ignore-init-module-imports,
        ]

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: \.lock$

# Configuration for specific tools
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [bandit, mypy]  # Skip slow hooks in CI
  submodules: false

# Local hooks for project-specific checks
repos:
  - repo: local
    hooks:
      # Check that model files have proper structure
      - id: check-model-structure
        name: Check model file structure
        entry: python
        language: python
        files: ^models/.*\.py$
        args: [
          -c,
          "
import ast
import sys

def check_model_file(filename):
    with open(filename, 'r') as f:
        try:
            tree = ast.parse(f.read())
            # Check for class definitions
            classes = [n for n in ast.walk(tree) if isinstance(n, ast.ClassDef)]
            if not classes:
                print(f'Warning: No classes found in {filename}')
            return True
        except SyntaxError as e:
            print(f'Syntax error in {filename}: {e}')
            return False

for filename in sys.argv[1:]:
    if not check_model_file(filename):
        sys.exit(1)
          ",
        ]

      # Check that test files follow naming convention
      - id: check-test-naming
        name: Check test file naming
        entry: python
        language: python
        files: ^tests/.*\.py$
        args: [
          -c,
          "
import sys
import os

for filename in sys.argv[1:]:
    basename = os.path.basename(filename)
    if not basename.startswith('test_') and basename != '__init__.py':
        print(f'Test file {filename} should start with test_')
        sys.exit(1)
          ",
        ]

      # Check for TODO comments in main code (warn but don't fail)
      - id: check-todos
        name: Check for TODO comments
        entry: python
        language: python
        files: ^(models|training|evaluation)/.*\.py$
        args: [
          -c,
          "
import sys
import re

todo_pattern = re.compile(r'#.*TODO|#.*FIXME|#.*XXX', re.IGNORECASE)

for filename in sys.argv[1:]:
    with open(filename, 'r') as f:
        for line_num, line in enumerate(f, 1):
            if todo_pattern.search(line):
                print(f'TODO found in {filename}:{line_num}: {line.strip()}')
          ",
        ]
        always_run: true

      # Check that config files are valid Python
      - id: check-config-syntax
        name: Check config file syntax
        entry: python
        language: python
        files: ^config/.*\.py$
        args: [-m, py_compile]

      # Ensure requirements.txt is sorted
      - id: sort-requirements
        name: Sort requirements.txt
        entry: python
        language: python
        files: requirements\.txt$
        args: [
          -c,
          "
import sys

for filename in sys.argv[1:]:
    with open(filename, 'r') as f:
        lines = [line.strip() for line in f if line.strip() and not line.startswith('#')]
    
    sorted_lines = sorted(lines, key=str.lower)
    
    if lines != sorted_lines:
        print(f'{filename} is not sorted. Please sort it.')
        with open(filename, 'w') as f:
            for line in sorted_lines:
                f.write(line + '\n')
          ",
        ]